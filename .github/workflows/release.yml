name: Release job

# This workflow updates the HMI displayed version in the ConfigMap file,
# creates a commit with the updated version, tag it and creates a pull request to merge it into master.

on:
  push:
    branches:
      - add_release_job
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'Release version'
        required: true
      environment:
        description: 'Environment (coreso/azure)'
        required: true
      namespace:
        description: 'Namespace (dev/test/prod)'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      RELEASE_VERSION: ${{ github.event.inputs.releaseVersion || '99.99.99' }}
      ENVIRONMENT: ${{ github.event.inputs.environment || 'azure' }}
      NAMESPACE: ${{ github.event.inputs.namespace || 'test' }}
   #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Save environment variable to file
        run: |
          echo "COMPLETE_VERSION=v${RELEASE_VERSION}-${ENVIRONMENT}-${NAMESPACE}" >> $GITHUB_ENV

      - name: Find ConfigMap file
        id: find_configmap_file
        run: |
          path="k8s/overlays/${ENVIRONMENT}/${NAMESPACE}/gridcapa-app-env-config.json"
          if [ "${ENVIRONMENT}" == "azure" ]; then
            sed_pattern="s/Azure .* : [0-9.]\+/Azure ${NAMESPACE} : ${RELEASE_VERSION}/g"
          else
            sed_pattern="s/Coreso .* : [0-9.]\+/Coreso ${NAMESPACE} : ${RELEASE_VERSION}/g"
          fi
          echo "configmap_file=${path}" >> $GITHUB_ENV
          echo "sed_pattern=${sed_pattern}" >> $GITHUB_ENV

      - name: Check if ConfigMap file exists
        run: |
          if [ -f "${{ env.configmap_file }}" ]; then
            echo "ConfigMap file exists."
          else
            echo "Error: ConfigMap file does not exist."
            exit 1
          fi
        shell: bash

      - name: Change version in ConfigMap file
        run: |
          echo "Executing sed command:"
          sed_command="sed -i '${{ env.sed_pattern }}' '${{ env.configmap_file }}'"
          echo "$sed_command"
          eval "$sed_command"

#TO DELETE AFTER DEBUG
      - name: Display modified ConfigMap content
        run: cat ${configmap_file}

      - name: Commit and tag release version
        uses: stefanzweifel/git-auto-commit-action@master
        with:
          branch: "release-${{ env.COMPLETE_VERSION }}"
          create_branch: true
          commit_message: "Prepare release ${{ env.COMPLETE_VERSION }}"
          tagging_message: "${{ env.COMPLETE_VERSION }}"

      - name: Create pull Request
        run: gh pr create -B master -H "release-${{ env.COMPLETE_VERSION }}" --title 'Update HMI version of ${ENVIRONMENT}-${NAMESPACE} to ${RELEASE_VERSION}'